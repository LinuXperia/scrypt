A library and command-line line utility for creating scrypt password key derivations. The programming language used is C.

You may help creating this program by improving portability, commenting or doing other work. Fork, create issues or contact me by email.

Uses code from the "scrypt" file encryption utility written by C. Percival, the scrypt algorithm by the same author, and the base91 implementation of Joachim Henke.

== Status
Should work on linux, but misses broad user testing.

Possible enhancements
* Portability
* Checking arguments for validity

== Installation
# ./build/make+install.sh target-prefix

* Installs a library under {prefix}/usr/lib/libscrypt.so
* Installs a header file under {prefix}/usr/include/scrypt.h
* Installs a binary under ${prefix}/usr/bin/scrypt-kdf

== Command-line interface
{{{
scrypt-kdf [options ...] password [salt size N r p salt-size]
                     base91 [base91 integer integer integer integer integer]

options
  -c|--check hash  tests if hash is derived from a password
  -a|--ascii-input  password and salt arguments are ascii encoded
  -h|--help  display this text and exit
  -v|--version  output version information and exit
}}}

Defaults are used with -

=== Examples
Create a hash with random salt from /dev/urandom and cost values estimated from system performance.
Beware that what looks like plain ascii encoded passwords in the examples is actually interpreted as base91. Use the "--ascii-input" option for actually using plain ascii.
{{{
scrypt-kdf testpassword
}}}

Custom values for salt and other parameters
{{{
scrypt-kdf testpassword testsalt 128 1024 8 1
}}}

Testing if a hash corresponds to a password
{{{
scrypt-kdftestpassword -c '_;*QrUlMHA:8%3cv95T4olchP`s_ooiU@xH]bRqokP&!ZM!c>&>V&NW*ZxwyY`6g5E)&TuAg!$[1NAC-9D_Fb-XLA-IA-QA'
success
}}}

Using a 64 bit random salt for a 128 bit key:
{{{
scrypt-kdftestpassword - 128 - - - 64
}}}

=== Advanced (not implemented)
* Read binary password from file or stdin
* Read binary salt from file
* Write to file or stdout
{{{
  -i|inputfile
  -s|saltfile
  -o|outfile
}}}

== Output-format
* Base91 encoded field values
* Delimited by -
* Order: key salt logN r p

== Defaults
* Salt read from /dev/urandom
* (N r p) parameters estimated by testing cpuspeed and free memory

== Structure
{{{
libscrypt
  scrypt
  scrypt_parse_string
  scrypt_set_defaults
  scrypt_to_string
scrypt
}}}

== Programming interface
=== Usage
* When using C, "#include <scrypt.h>"
* Setup linking with "libscrypt"

=== scrypt
{{{
int scrypt (
  const uint8_t * password, size_t password_len, const uint8_t * salt, size_t salt_len,
  uint64_t N, uint32_t r, uint32_t p, uint8_t * res, size_t res_len);
}}}

Implementation of the fundamental scrypt key derivation function.

=== scrypt_to_string
{{{
int scrypt_to_string (
  uint8_t* password, size_t password_len, uint8_t* salt, size_t salt_len,
  uint64_t N, uint32_t r, uint32_t p, size_t size, uint8_t** res, size_t* res_len);
}}}

Creates a hash string like the command-line utility.

==== Example call
{{{
uint8_t* res;
size_t res_len;
int status;
uint8_t* password = 0;
uint8_t* salt = 0;
size_t password_len = 0;
size_t salt_len = 0;
size_t size = 0;
uint64_t N = 0;
uint32_t r = 0;
uint32_t p = 0;

status = scrypt_to_string(password, password_len, salt, salt_len, N, r, p, size, &res, &res_len);
}}}

=== scrypt_parse_string
{{{
int scrypt_parse_string (uint8_t* arg, size_t arg_len, uint8_t** key, size_t* key_len, uint8_t** salt, size_t* salt_len, uint64_t* N, uint32_t* r, uint32_t* p);
}}}

==== Example call
Variable initialisations implied, see above.
{{{
status = scrypt_parse_string(check_string, strlen(check_string), &key, &key_len, &salt, &salt_len, &N, &r, &p);
}}}

=== scrypt_set_defaults
{{{
int scrypt_set_defaults (uint8_t** salt, size_t* salt_len, size_t* size, uint64_t* N, uint32_t* r, uint32_t* p);
}}}

Variables are updated with defaults if set to 0.

==== Example call
{{{
status = scrypt_set_defaults(&salt, &salt_len, &size, &N, &r, &p);
}}}

== License
* Base91 implementation - bsd 3-clause
* Scrypt implementation and utility code - bsd 2-clause
* Rest - gpl3

== Rationale
=== Field order
* A program may use the output-string to split the key and salt and use fixed (N r p) values. It may use only the key, and store the salt somewhere else.
* Key and salt have a more predictable length, which makes it simpler to extract from the beginning

=== Field separator
* Don't use a cryptic symbol if a less cryptic symbol does the job, for example prefer - over $
* Base91 leaves "-" for use

=== Base91
* Enables the use of the full binary range for password and salt on the command-line
* Base91 seems reasonably well defined - efficient because it uses nearly all of asciis 94 printable characters, and leaving three useful characters out of the set, "- ' \"
* The encoding\decoding algorithm is simple

=== Original scrypt utility
This interface could be combined with the original scrypt file encryption utility either by writing a wrapper or extending the library with file encryption features.

== External links
* http://code.google.com/p/scrypt/
* http://base91.sourceforge.net/
* http://www.tarsnap.com/scrypt.html
